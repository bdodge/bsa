//--------------------------------------------------------------------
//
// File: bsaframe.cpp
// Desc: application framework
// Auth: Brian Dodge
//
// (C)opyright 2003 - 2005 - BSA and Brian Dodge
// ALL RIGHTS RESERVED
//
//--------------------------------------------------------------------
#include "framex.h"

#define BSA_FRAME_FONTSIZE 12

DWORD BappFrame::m_initcount = 0;

//***********************************************************************
BappFrame::BappFrame(HINSTANCE hInstance)
	:
	BappPanel(_T("Frame"), NULL),
	m_init(false)
{
	m_hInstance = hInstance;
	if (m_initcount == 0)
	{
		m_hFont = NULL;
		m_hBoldFont = NULL;
	}
	m_initcount++;
}

//***********************************************************************
BappFrame::~BappFrame()
{
	m_initcount--;
	if(m_initcount == 0)
	{
		if(m_hFont)		DeleteObject(m_hFont);
		if(m_hBoldFont)	DeleteObject(m_hFont);
		m_hFont = NULL;
		m_hBoldFont = NULL;
	}
}

//***********************************************************************
ERRCODE BappFrame::Open(LPCTSTR title, int x, int y, int w, int h)
{
	if(! m_init)
	{
		return errFAILURE;
	}
	// create initial app frame window
	//
	m_hwnd = CreateWindow(
						_T("baf_app_frame"),
						title,
						WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN,
						x, y, w, h,
						NULL, NULL,
						m_hInstance,
						(LPVOID)this
						);

	if(! m_hwnd)
	{
		int err = GetLastError();
		return errFAILURE;
	}
	ShowWindow(m_hwnd, SW_SHOW);
	return errOK;
}

#if 0
//***********************************************************************
LRESULT BappFrame::OnMessage(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	HDC			hdc;
	PAINTSTRUCT ps;
	RECT		rc;

	switch(msg)
	{
	case WM_PAINT:

		hdc = BeginPaint(hWnd, &ps);
		EndPaint		(hWnd, &ps);
		break;

	case WM_DESTROY:

		PostQuitMessage(0);
		break;

	default:
		return BappPanel::OnMessage(hWnd, msg, wParam, lParam);
	}
	return 0;
}
#endif


//***********************************************************************
LRESULT CALLBACK BAFframeProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	PBAFCOMP	pc;

	pc = (PBAFCOMP)GetWindowLong(hWnd, GWL_USERDATA);

	switch(message)
	{
	case WM_CREATE:

		// creation, copy cookie into userdata as "this"
		{
			LPCREATESTRUCT pcs = (LPCREATESTRUCT)lParam;

			SetWindowLong(hWnd, GWL_USERDATA, (LPARAM)pcs->lpCreateParams);

			pc = (PBAFCOMP)GetWindowLong(hWnd, GWL_USERDATA);
		}
		// 	FALL into default
	default:

		if(pc)	return pc->OnMessage(hWnd, message, wParam, lParam);
		return DefWindowProc(hWnd, message, wParam, lParam);
   }
   return 0;
}

// vert resizer cursor bits
//
static const BYTE baf_vc_xor[] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00,
	0x00, 0x05, 0xa0, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x05, 0xa0, 0x00,
	0x00, 0x05, 0xa0, 0x00, 0x00, 0x15, 0xa8, 0x00, 0x00, 0x2d, 0xb4, 0x00, 0x00, 0x4d, 0xb2, 0x00,
	0x00, 0x81, 0x81, 0x00, 0x00, 0x4d, 0xb2, 0x00, 0x00, 0x2d, 0xb4, 0x00, 0x00, 0x15, 0xa8, 0x00,
	0x00, 0x05, 0xa0, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x05, 0xa0, 0x00,
	0x00, 0x05, 0xa0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE baf_vc_and[] =
{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff,
	0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff,
	0xff, 0xf8, 0x1f, 0xff, 0xff, 0xe8, 0x17, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0x80, 0x01, 0xff,
	0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xe8, 0x17, 0xff,
	0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff,
	0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// horiz resizer cursor bits
//
static const BYTE baf_hc_xor[] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x04, 0x10, 0x00,
	0x00, 0x03, 0x60, 0x00, 0x01, 0xff, 0x7f, 0xc0, 0x01, 0x00, 0x00, 0x40, 0x01, 0xff, 0xff, 0xc0,
	0x01, 0xff, 0xff, 0xc0, 0x01, 0x00, 0x00, 0x40, 0x01, 0xff, 0x7f, 0xc0, 0x00, 0x03, 0x60, 0x00,
	0x00, 0x04, 0x10, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE baf_hc_and[] =
{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x7f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8, 0x0f, 0xff,
	0xff, 0xfc, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f,
	0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x1f, 0xff,
	0xff, 0xf8, 0x0f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0x7f, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


//***********************************************************************
ERRCODE BappFrame::Init(
						HINSTANCE hInstance,
						LPCTSTR id_menu,
						LPCTSTR id_icon1,
						LPCTSTR id_icon2,
						int bkg
					)
{
	int scAppBkg	= bkg;

	bool showbgr	= false;

	WNDCLASS wc;

	if(m_init) return errOK;

	// create resizer cursors
	//
#ifndef X11
	HCURSOR hVert = LoadCursor(NULL, IDC_SIZEWE);
	HCURSOR hHorz = LoadCursor(NULL, IDC_SIZENS);
#else
	HCURSOR hVert = CreateCursor(hInstance, 16, 16, 32, 32, baf_vc_and, baf_vc_xor);
	HCURSOR hHorz = CreateCursor(hInstance, 16, 16, 32, 32, baf_hc_and, baf_hc_xor);
#endif
	// Ensure that the common control DLL is loaded.
	//InitCommonControls();

	m_hInstance 		= hInstance;
	m_hIcon 			= LoadIcon(hInstance, (LPCTSTR)id_icon1);

	// register class for application window frame
	//
	wc.style			= CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc		= (WNDPROC)BAFframeProc;
	wc.cbClsExtra		= 0;
	wc.cbWndExtra		= 0;
	wc.hInstance		= m_hInstance;
	wc.hIcon			= m_hIcon;
	wc.hCursor			= LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground	= (HBRUSH)(showbgr ? CreateSolidBrush(RGB(33,11,110)) : (HBRUSH)(intptr_t)(scAppBkg+1));
	wc.lpszMenuName		= id_menu; /*MAKEINTRESOURCE(id_menu);*/
	wc.lpszClassName	= _T("baf_app_frame");

	ATOM aAppClass = RegisterClass(&wc);

	// register class for dockable panel
	//
	wc.style			= CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc		= (WNDPROC)BAFframeProc;
	wc.cbClsExtra		= 0;
	wc.cbWndExtra		= 0;
	wc.hInstance		= m_hInstance;
	wc.hIcon			= m_hIcon;
	wc.hCursor			= LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground	= (HBRUSH)(showbgr ? CreateSolidBrush(RGB(33,211,10)) : (HBRUSH)(intptr_t)(scAppBkg+1));
	wc.lpszMenuName		= NULL;
	wc.lpszClassName	= _T("baf_panel");

	ATOM aPanelClass = RegisterClass(&wc);

	// window class for vertical sizer
	//
	wc.style			= CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc		= (WNDPROC)BAFframeProc;
	wc.cbClsExtra		= 0;
	wc.cbWndExtra		= 0;
	wc.hInstance		= m_hInstance;
	wc.hIcon			= NULL;
	wc.hCursor			= hVert;
	wc.hbrBackground	= (HBRUSH)(intptr_t)(scAppBkg+1);
	wc.lpszMenuName		= NULL;
	wc.lpszClassName	= _T("baf_vsizer");

	ATOM aVSZClass = RegisterClass(&wc);

	// window class for horizontal sizer
	//
	wc.style			= CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc		= (WNDPROC)BAFframeProc;
	wc.cbClsExtra		= 0;
	wc.cbWndExtra		= 0;
	wc.hInstance		= m_hInstance;
	wc.hIcon			= NULL;
	wc.hCursor			= hHorz;
	wc.hbrBackground	= (HBRUSH)(intptr_t)(scAppBkg+1);
	wc.lpszMenuName		= NULL;
	wc.lpszClassName	= _T("baf_hsizer");

	ATOM aHSZClass = RegisterClass(&wc);

	if(! m_hFont)
	{
		// create control font
		//
		m_hFont = CreateFont(
							BSA_FRAME_FONTSIZE,
							0,0,0,400,FALSE,FALSE,FALSE,ANSI_CHARSET,
							OUT_DEFAULT_PRECIS,CLIP_DEFAULT_PRECIS,
							ANTIALIASED_QUALITY, //	DEFAULT_QUALITY,
							FF_SWISS,_T("Arial")
							);
	}
	if(! m_hBoldFont)
	{
		m_hBoldFont = CreateFont(
							BSA_FRAME_FONTSIZE,
							0,0,0,800,FALSE,FALSE,FALSE,ANSI_CHARSET,
							OUT_DEFAULT_PRECIS,CLIP_DEFAULT_PRECIS,
							ANTIALIASED_QUALITY, //	DEFAULT_QUALITY,
							FF_SWISS,_T("Arial")
							);
	}
	m_init = true;
	m_initcount++;
	return errOK;
}


