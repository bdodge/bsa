
#include "bcalcx.h"

#define CELLW	8
#define CELLH	13


// Bitmap (8 x 13) font for digits
//
static const BYTE char0[] = {
	0x00,
	0x3C,
	0x42,
	0x42,
	0x42,
	0x42,
	0x42,
	0x42,
	0x42,
	0x42,
	0x42,
	0x3C,
	0x00,
};
static const BYTE char1[] = {
	0x00,
	0x08,
	0x18,
	0x28,
	0x08,
	0x08,
	0x08,
	0x08,
	0x08,
	0x08,
	0x08,
	0x7E,
	0x00,
};
static const BYTE char2[] = {
	0x00,
	0x38,
	0x44,
	0x02,
	0x02,
	0x02,
	0x04,
	0x08,
	0x10,
	0x20,
	0x40,
	0x7E,
	0x00,
};
static const BYTE char3[] = {
	0x00,
	0x3C,
	0x42,
	0x02,
	0x02,
	0x02,
	0x3C,
	0x02,
	0x02,
	0x02,
	0x42,
	0x3C,
	0x00,
};
static const BYTE char4[] = {
	/*
	0x00,
	0x04,
	0x0C,
	0x14,
	0x24,
	0x44,
	0x84,
	0xFE,
	0x04,
	0x04,
	0x04,
	0x04,
	0x00,
	*/
	0x00,
	0x02,
	0x06,
	0x0A,
	0x12,
	0x22,
	0x42,
	0x7F,
	0x02,
	0x02,
	0x02,
	0x02,
	0x00,
};
static const BYTE char5[] = {
	0x00,
	0x7E,
	0x40,
	0x40,
	0x40,
	0x78,
	0x04,
	0x02,
	0x02,
	0x02,
	0x44,
	0x38,
	0x00,
};
static const BYTE char6[] = {
	0x00,
	0x3C,
	0x42,
	0x40,
	0x40,
	0x40,
	0x7C,
	0x42,
	0x42,
	0x42,
	0x42,
	0x3C,
	0x00,
};
static const BYTE char7[] = {
	0x00,
	0x7E,
	0x02,
	0x04,
	0x04,
	0x08,
	0x08,
	0x10,
	0x10,
	0x20,
	0x20,
	0x20,
	0x00,
};
static const BYTE char8[] = {
	0x00,
	0x3C,
	0x42,
	0x42,
	0x42,
	0x42,
	0x3C,
	0x42,
	0x42,
	0x42,
	0x42,
	0x3C,
	0x00,
};
static const BYTE char9[] = {
	0x00,
	0x3C,
	0x42,
	0x42,
	0x42,
	0x42,
	0x3E,
	0x02,
	0x02,
	0x02,
	0x42,
	0x3C,
	0x00,
};
static const BYTE charA[] = {
	0x00,
	0x18,
	0x24,
	0x42,
	0x42,
	0x42,
	0x7E,
	0x42,
	0x42,
	0x42,
	0x42,
	0x42,
	0x00,
};
static const BYTE charB[] = {
	0x00,
	0x78,
	0x44,
	0x42,
	0x42,
	0x44,
	0x78,
	0x44,
	0x42,
	0x42,
	0x44,
	0x78,
	0x00,
};
static const BYTE charC[] = {
	0x00,
	0x1E,
	0x20,
	0x40,
	0x40,
	0x40,
	0x40,
	0x40,
	0x40,
	0x40,
	0x20,
	0x1E,
	0x00,
};
static const BYTE charD[] = {
	0x00,
	0x78,
	0x44,
	0x42,
	0x42,
	0x42,
	0x42,
	0x42,
	0x42,
	0x42,
	0x44,
	0x78,
	0x00,
};
static const BYTE charE[] = {
	0x00,
	0x3E,
	0x40,
	0x40,
	0x40,
	0x40,
	0x7E,
	0x40,
	0x40,
	0x40,
	0x40,
	0x3E,
	0x00,
};
static const BYTE charF[] = {
	0x00,
	0x3E,
	0x40,
	0x40,
	0x40,
	0x40,
	0x7E,
	0x40,
	0x40,
	0x40,
	0x40,
	0x40,
	0x00,
};
static const BYTE charQM[] = {
	0x00,
	0x38,
	0x44,
	0x02,
	0x02,
	0x02,
	0x04,
	0x08,
	0x10,
	0x10,
	0x00,
	0x10,
	0x00,
};
static const BYTE charSpace[] = {
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
};
static const BYTE charDash[] = {
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x3E,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
};
static const BYTE charDot[] = {
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x01,
};
static const BYTE charPlus[] = {
	0x00,
	0x00,
	0x00,
	0x08,
	0x08,
	0x08,
	0x3E,
	0x08,
	0x08,
	0x08,
	0x00,
	0x00,
	0x00,
};
static const BYTE charx[] = {
	0x00,
	0x00,
	0x00,
	0x82,
	0x44,
	0x28,
	0x10,
	0x28,
	0x44,
	0x82,
	0x00,
	0x00,
	0x00,
};
static const BYTE charLpar[] = {
	0x00,
	0x04,
	0x08,
	0x10,
	0x10,
	0x20,
	0x20,
	0x20,
	0x10,
	0x10,
	0x08,
	0x04,
	0x00,
};


//**************************************************************************
static const LPBYTE fontdata(char glyph)
{
	switch(glyph)
	{
	case '0': return (const LPBYTE)&char0[0];
	case '1': return (const LPBYTE)&char1[0];
	case '2': return (const LPBYTE)&char2[0];
	case '3': return (const LPBYTE)&char3[0];
	case '4': return (const LPBYTE)&char4[0];
	case '5': return (const LPBYTE)&char5[0];
	case '6': return (const LPBYTE)&char6[0];
	case '7': return (const LPBYTE)&char7[0];
	case '8': return (const LPBYTE)&char8[0];
	case '9': return (const LPBYTE)&char9[0];
	case 'A': return (const LPBYTE)&charA[0];
	case 'B': return (const LPBYTE)&charB[0];
	case 'C': return (const LPBYTE)&charC[0];
	case 'D': return (const LPBYTE)&charD[0];
	case 'E': return (const LPBYTE)&charE[0];
	case 'F': return (const LPBYTE)&charF[0];
	case ' ': return (const LPBYTE)&charSpace[0];
	case '-': return (const LPBYTE)&charDash[0];
	case '.': return (const LPBYTE)&charDot[0];
	case 'x': return (const LPBYTE)&charx[0];
	case '+': return (const LPBYTE)&charPlus[0];
	case '(': return (const LPBYTE)&charLpar[0];
	default:  return (const LPBYTE)&charQM[0];
	}
}

//**************************************************************************
void DrawDigit(
				HDC		hdc,
				int		x,
				int		y,
				int		size,
				int		solid,
				int		code,
				int		decpoint,
				int		comma,
				HBRUSH	hbrFrg,
				HBRUSH	hbrBkg
			  )
{
	int		i, j, xx, chunk;
	WORD	mask;
	int		biton;
	LPBYTE	font;
	LPBYTE	dodpnt;
	RECT	rc;
	int		cfill;
	
	cfill = solid ? 0 : 1;
	chunk = size - cfill;

	font	= fontdata(code);
	dodpnt	= decpoint ? fontdata('.') : NULL;


	for(i = 0; i < CELLH; i++, y += size)
	{
		for(j = xx = 0, mask = 0x80; j < CELLW; j++, xx += size, mask >>= 1)
		{
			rc.left		= x + xx;
			rc.top		= y;
			rc.bottom	= y + chunk;
			rc.right	= x + xx + chunk;
			biton = font[i] & mask;
			if(dodpnt)
				biton |= dodpnt[i] & mask;
			if(biton)
			{
				FillRect(hdc, &rc, hbrFrg);
				if(cfill)
				{
					rc.left		= x + xx + chunk;
					rc.top		= y;
					rc.bottom	= y + chunk + 1;
					rc.right	= x + xx + chunk + 1;
					FillRect(hdc, &rc, hbrBkg);
					rc.left		= x + xx;
					rc.top		= y + chunk;
					rc.bottom	= y + chunk + 1;
					rc.right	= x + xx + chunk + 1;
					FillRect(hdc, &rc, hbrBkg);
				}
			}
		}
	}
}

